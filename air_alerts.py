#!/usr/bin/env python3

from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.reactive import reactive
from textual.timer import Timer
from textual.events import Key
from rich.panel import Panel
import requests
import datetime as dt
import webbrowser

# ----------- –ù–ê–°–¢–†–û–ô–ö–ò -----------
TOKEN = ""
REFRESH_EVERY = 30          # —Å–µ–∫—É–Ω–¥
# ---------------------------------

OBLASTS = [
    "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º", "–í–æ–ª—ã–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–í–∏–Ω–Ω–∏—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î–æ–Ω–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ñ–∏—Ç–æ–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–≥. –ö–∏–µ–≤", "–ö–∏–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–∏—Ä–æ–≤–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–õ—É–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–û–¥–µ—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ü–æ–ª—Ç–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–†–æ–≤–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–≥. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–°—É–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢–µ—Ä–Ω–æ–ø–æ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–•–º–µ–ª—å–Ω–∏—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–ß–µ—Ä–∫–∞—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω–æ–≤–∏—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
]

class AlertPanel(Static):
    """–í–∏–¥–∂–µ—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–∞–Ω–µ–ª—å—é Rich."""
    def show_text(self, text: str, style: str = "green") -> None:
        self.update(Panel(text, title="–í–æ–∑–¥—É—à–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏", border_style=style))

class AirAlertApp(App):
    """–û—Å–Ω–æ–≤–Ω–æ–µ Textual-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    CSS = """
    Screen {
        layout: vertical;
        padding: 1;
    }
    #panel {
        width: 100%;
        height: 100%;
    }
    """
    BINDINGS = [("q", "quit", "–í—ã—Ö–æ–¥")]

    alerts = reactive("-- –∑–∞–≥—Ä—É–∑–∫–∞‚Ä¶")
    timer: Timer | None = None

    def compose(self) -> ComposeResult:
        self.panel = AlertPanel("", id="panel")
        yield self.panel

    def on_mount(self) -> None:
        self.refresh_alerts()                                 # –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        self.timer = self.set_interval(REFRESH_EVERY, self.refresh_alerts)

    def refresh_alerts(self) -> None:
        url = (
            "https://api.alerts.in.ua/v1/iot/active_air_raid_alerts_by_oblast.json"
            f"?token={TOKEN}"
        )
        try:
            resp = requests.get(url, timeout=5)
            resp.raise_for_status()
            data = resp.json()  # —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "ANNNPN..."
        except Exception as e:
            self.panel.show_text(f"[bold red]‚ö† –û—à–∏–±–∫–∞ API[/]\n{e}", style="red")
            return

        now = dt.datetime.now().strftime("%H:%M:%S")
        lines: list[str] = []
        for status, oblast in zip(data, OBLASTS):
            if status == "A":
                lines.append(f"[bold red]{oblast}[/] ‚Äî [red]üö® –¢–†–ò–í–û–ì–ê[/]")
            elif status == "P":
                lines.append(f"[yellow]{oblast}[/] ‚Äî [yellow]‚ö† –ß–ê–°–¢–ö–û–í–ê[/]")

        if lines:
            txt = "\n".join(lines) + f"\n\n[i]–û–±–Ω–æ–≤–ª–µ–Ω–æ {now}"
            self.panel.show_text(txt, style="red")
        else:
            self.panel.show_text(f"[green]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥[/]\n\n[i]–û–±–Ω–æ–≤–ª–µ–Ω–æ {now}", style="green")

    def on_key(self, event: Key) -> None:
        # –ù–∞–∂–∞—Ç–∏–µ m/M –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É
        if event.key.lower() == "m":
            webbrowser.open('https://alerts.in.ua/')

if __name__ == "__main__":
    AirAlertApp().run()
